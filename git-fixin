#!/usr/bin/env perl
# git-fixin - automatically convert indentation to your preferred format on
#     check-out and back to the original formatting on check-in
# James Halliday (http://substack.net)
# vim:ts=4:sw=4:tw=80:et

# TODO:
# * pattern exceptions
# * per-repository rc files to use

use warnings;
use strict;
use 5.10.0;

use File::Spec;
my $bin_path = File::Spec->rel2abs($0);

my $usage = <<EOF;
    Configure a git repository to automatially convert between your indentation
    preference when you check out files and back to the original formatting when
    you check in.
    
    The project's .git/info/attributes file is modified by this program.
    The syntax for PATTERNS is available in more detail by consulting
        `git help attributes`.
    
    Where --filter appears below, it refers to the filter name to use.
        It defaults to 'fixin'.
    
    Usage:
        $0 add PATTERNS
            Register PATTERNS to use the indentation filter on.
            Files are specified by attribute patterns, so *.js will add all js
            files in all directories.
            
            Example:
                $0 add \\*.pl
                $0 add \\*.hs \\*.lhs
                $0 add foo/bar/baz/quux.c
            
            Tip: use \\* instead of * to register a pattern so your shell
            doesn't expand paths if files in the current directory match.
        
        $0 remove patterns
        $0 rm patterns
            Unregister a previously added pattern.
            
            Example:
                $0 add \\*.c
                $0 rm \\*.c
            
            Tip: use \\* instead of * to register a pattern so your shell
            doesn't expand paths if files in the current directory match.
        
        $0 list
        $0 ls
            Show the patterns in the attribute file.
        
        $0 install { --filter=FILTER, --global }
        
            Install the indentation filter into the project configuration. This
            only needs to be done once for each project, or one globally with
            --global.
EOF

use Getopt::Casual;
my $cmd = shift or die $usage;

use Cwd qw/getcwd/;
chdir ".." until -d ".git" or getcwd eq "/";
getcwd ne "/" or die "Not in a git project directory\n";

use Tie::File;
tie my @attrs, "Tie::File", ".git/info/attributes"
    or die "Couldn't open .git/info/attributes: $!";

$ARGV{"--filter"} //= "fixin";

if ($ARGV{"add"}) {
    for my $pat (grep { $_ ne "1" } @ARGV) {
        push @attrs, "$pat filter=$ARGV{q/--filter/}";
    }
}
elsif ($cmd eq "rm" or $cmd eq "remove") {
    @attrs = grep {
        if (my ($pat) = $_ =~ m/^(\S+) \s+ filter=$ARGV{q[--filter]}/) {
            grep { $_ ne "1" and $_ eq $pat } @ARGV;
        }
        else {
            undef
        }
    } @attrs;
}
elsif ($cmd eq "list" or $cmd eq "ls") {
    print "$_\n" for grep defined, map m{
        ^ (\S+) \s+ filter=$ARGV{q[--filter]}
    }x, @attrs;
}
elsif ($cmd eq "install") {
    my @global = $ARGV{"--global"} ? "--global" : ();
    
    # because of duplicate entries, unset first
    system qw/git config --unset-all/, @global,
        "filter.$ARGV{q[--filter]}.smudge";
    system qw/git config --unset-all/, @global,
        "filter.$ARGV{q[--filter]}.clean";
    
    # then set
    system qw/git config --add/, @global,
        "filter.$ARGV{q[--filter]}.smudge", "'$bin_path --convert'";
    system qw/git config --add/, @global,
        "filter.$ARGV{q[--filter]}.clean", "'$bin_path --restore'";
}
elsif ($cmd eq "uninstall") {
    system qw/git config --remove-section/, "filter.$ARGV{q[--filter]}",
        ($ARGV{"--global"} ? "--global" : ());
}
else {
    die $usage;
}

untie @attrs;
